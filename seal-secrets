#!/bin/zsh

# Load seal-secrets.env file
source seal-secrets.env

# Check if $namespace is set
if [ -z "$namespace" ]; then
  echo "Error: \$namespace is not set. Exiting script."
  exit 1
fi
#Check if $controller_name is set
if [ -z "$controller_name" ]; then
  echo "Error: \$controller_name is not set. Exiting script."
  exit 1
fi
#Check if $controller_namespace is set
if [ -z "$controller_namespace" ]; then
  echo "Error: \$controller_namespace is not set. Exiting script."
  exit 1
fi


echo "Creating sealed secrets for namespace: $namespace"

# Iterate over each .env file that is not a example.env or seal-secrets.env or .env
for env_file in $(ls *.env | grep -v 'example\.env' | grep -v 'seal-secrets.env'); do

    # Get the name of the env file without the .env extension
    env_name=$(basename "$env_file" .env)

    # Create sealed secret YAML using kubectl and kubeseal
    kubectl create secret generic "$env_name-Secrets" --dry-run=client --from-env-file="$env_file" -o yaml | \
    kubeseal \
        --controller-name=$controller_name \
        --controller-namespace=$controller_namespace \
        --format yaml \
        --namespace $namespace \
        > "$env_name-Sealed-Secret.yaml"

    echo "Created and sealed a secret from $env_file"
done

